---
- name: Setup Docker Swarm Manager
  hosts: manager
  become: yes
  vars:
    docker_image: "slayerop15/yii2-docker-ansible:latest"
    app_dir: "/opt/yii2-app"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - software-properties-common
          - nginx
          - git
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Start and enable Docker
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Restart Docker service to apply group changes
      systemd:
        name: docker
        state: restarted

    - name: Force reload user groups
      shell: |
        sudo usermod -aG docker {{ ansible_user }}
        sudo systemctl restart docker
      become: yes

    - name: Reset SSH connection to apply docker group changes
      meta: reset_connection

    - name: Verify docker works without sudo
      shell: docker info
      become_user: "{{ ansible_user }}"
      register: docker_test
      retries: 3
      delay: 5
      until: docker_test.rc == 0

    - name: Check if Swarm is initialized
      shell: docker info --format '{{ "{{" }}.Swarm.LocalNodeState{{ "}}" }}'
      register: swarm_status
      changed_when: false

    - name: Initialize Docker Swarm
      shell: docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}
      when: swarm_status.stdout != "active"

    - name: Get worker join token
      shell: docker swarm join-token worker -q
      register: worker_token
      changed_when: false

    - name: Display worker join command
      debug:
        msg: "Workers can join with: docker swarm join --token {{ worker_token.stdout }} {{ ansible_default_ipv4.address }}:2377"

    - name: Create app directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Create docker-stack.yml
      copy:
        src: ../docker-stack.yml
        dest: "{{ app_dir }}/docker-stack.yml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Configure Nginx
      copy:
        src: ../nginx-conf/yii2-production.conf
        dest: /etc/nginx/conf.d/yii2-app.conf
        backup: yes
      notify: restart nginx

    - name: Remove default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Test nginx configuration
      command: nginx -t

    - name: Start and enable nginx
      systemd:
        name: nginx
        enabled: yes
        state: restarted

    - name: Pull Docker image
      docker_image:
        name: "{{ docker_image }}"
        source: pull
        force_source: yes
      become_user: "{{ ansible_user }}"

    - name: Deploy application stack
      shell: |
        cd {{ app_dir }}
        docker stack deploy --compose-file docker-stack.yml yii2-app
      become_user: "{{ ansible_user }}"

    - name: Wait for application services to be ready
      shell: docker service ls --filter name=yii2-app --format "{{ "{{" }}.Name{{ "}}" }}\t{{ "{{" }}.Replicas{{ "}}" }}"
      register: service_status
      until: service_status.stdout | regex_search('yii2-app_app.*3/3')
      retries: 10
      delay: 15
      become_user: "{{ ansible_user }}"
      ignore_errors: yes

    - name: Wait for database service to be ready
      shell: docker service ls --filter name=yii2-app_db --format "{{ "{{" }}.Name{{ "}}" }}\t{{ "{{" }}.Replicas{{ "}}" }}"
      register: db_service_status
      until: db_service_status.stdout | regex_search('yii2-app_db.*1/1')
      retries: 8
      delay: 20
      become_user: "{{ ansible_user }}"
      ignore_errors: yes

    - name: Check container distribution across nodes
      shell: docker service ps yii2-app_app --format "table {{ "{{" }}.Name{{ "}}" }}\t{{ "{{" }}.Node{{ "}}" }}\t{{ "{{" }}.CurrentState{{ "}}" }}"
      register: container_distribution
      become_user: "{{ ansible_user }}"
      ignore_errors: yes

    - name: Check database placement
      shell: docker service ps yii2-app_db --format "table {{ "{{" }}.Name{{ "}}" }}\t{{ "{{" }}.Node{{ "}}" }}\t{{ "{{" }}.CurrentState{{ "}}" }}"
      register: db_placement
      become_user: "{{ ansible_user }}"
      ignore_errors: yes

    - name: Show database logs if not running
      shell: docker service logs yii2-app_db --tail 20
      register: db_logs
      become_user: "{{ ansible_user }}"
      ignore_errors: yes
      when: db_service_status.stdout | regex_search('yii2-app_db.*0/1')

    - name: Get final service status
      shell: docker service ls --filter name=yii2-app --format "{{ "{{" }}.Name{{ "}}" }}\t{{ "{{" }}.Replicas{{ "}}" }}"
      register: final_service_status
      become_user: "{{ ansible_user }}"

    - name: Show deployment info
      debug:
        msg: |
          ‚úÖ Manager deployed with perfect distribution!
          
          üåê Application: http://{{ ansible_default_ipv4.address }}
          üíö Health: http://{{ ansible_default_ipv4.address }}/health
          
          üìã Worker join command:
          docker swarm join --token {{ worker_token.stdout }} {{ ansible_default_ipv4.address }}:2377
          
          üîß Services Status:
          {{ final_service_status.stdout }}
          
          üìç Container Distribution (1 per machine):
          {{ container_distribution.stdout }}
          
          üóÑÔ∏è Database Placement (Manager only):
          {{ db_placement.stdout }}
          
          {% if db_logs is defined and db_logs.stdout %}
          üö® Database Issues (check logs):
          {{ db_logs.stdout | truncate(200) }}
          {% endif %}
          
          üí° Perfect Setup Achieved:
          ‚Ä¢ Manager: Database + 1 App Container
          ‚Ä¢ Worker1: 1 App Container  
          ‚Ä¢ Worker2: 1 App Container
          
          üöÄ Next: Deploy workers with the join command above!

  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted