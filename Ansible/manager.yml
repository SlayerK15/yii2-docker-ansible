---
- name: Setup Docker Swarm Manager
  hosts: yii2-manager
  become: yes
  vars:
    docker_stack_name: yii2-app
    app_port: 9000
    nginx_config_source: ../nginx-conf/yii2-production.conf
    stack_config_source: ../docker-stack.yml

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - nginx
          - git
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Start and enable Docker
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Restart Docker service to apply group changes
      systemd:
        name: docker
        state: restarted

    # CRITICAL: Force new SSH connection with updated group membership
    - name: Reset SSH connection to apply docker group changes
      meta: reset_connection

    - name: Wait for connection reset
      wait_for_connection:
        delay: 5
        timeout: 30

    - name: Verify docker works without sudo
      command: docker version
      become: no
      register: docker_version_result
      changed_when: false

    # Docker Swarm Setup
    - name: Check if Swarm is initialized
      command: docker info --format '{{ "{{" }}.Swarm.LocalNodeState{{ "}}" }}'
      register: swarm_status
      become: no
      changed_when: false

    - name: Initialize Docker Swarm
      command: docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}
      become: no
      when: swarm_status.stdout != "active"

    - name: Get worker join token
      command: docker swarm join-token worker -q
      register: worker_token
      become: no
      changed_when: false

    - name: Display worker join command
      debug:
        msg: "Workers can join with: docker swarm join --token {{ worker_token.stdout }} {{ ansible_default_ipv4.address }}:2377"

    # Application Setup
    - name: Create app directory
      file:
        path: /opt/yii2-app
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Create docker-stack.yml
      copy:
        src: "{{ stack_config_source }}"
        dest: /opt/yii2-app/docker-stack.yml
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    # Nginx Configuration
    - name: Configure Nginx
      copy:
        src: "{{ nginx_config_source }}"
        dest: /etc/nginx/conf.d/yii2-production.conf
        backup: yes
      notify: restart nginx

    - name: Remove default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: restart nginx

    - name: Test nginx configuration
      command: nginx -t
      changed_when: false

    - name: Start and enable nginx
      systemd:
        name: nginx
        enabled: yes
        state: started

    # Application Deployment (simplified - no complex monitoring)
    - name: Pull Docker image
      command: docker pull slayerop15/yii2-docker-ansible:latest
      become: no
      retries: 3
      delay: 10

    - name: Deploy application stack
      command: docker stack deploy -c /opt/yii2-app/docker-stack.yml {{ docker_stack_name }}
      become: no
      args:
        chdir: /opt/yii2-app

    # Simple wait instead of complex monitoring
    - name: Wait for stack deployment to settle
      pause:
        seconds: 60

    # Simple final status check
    - name: Get final service status
      command: docker service ls --filter name={{ docker_stack_name }}
      become: no
      register: final_services
      changed_when: false

    # Clean deployment summary without problematic variable references
    - name: Show deployment summary
      debug:
        msg: |
          üéâ DEPLOYMENT COMPLETE!
          
          üìä Stack Status: {{ docker_stack_name }} deployed
          üåê Access URL: http://{{ ansible_default_ipv4.address }}
          üîß Manager IP: {{ ansible_default_ipv4.address }}
          
          üë• Worker Join Command:
          docker swarm join --token {{ worker_token.stdout }} {{ ansible_default_ipv4.address }}:2377
          
          üìù Next Steps:
          1. Deploy workers: ansible-playbook -i inventory worker.yml
          2. Check services: docker service ls
          3. Access application: http://{{ ansible_default_ipv4.address }}

  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted