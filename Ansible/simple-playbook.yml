---
- name: Smart Yii2 Docker Swarm Deployment (Single or Multi-Node)
  hosts: all
  become: yes
  vars:
    app_user: "ubuntu"
    app_name: "yii2-docker-ansible"
    repo_url: "https://github.com/SlayerK15/yii2-docker-ansible.git"
    app_directory: "/opt/{{ app_name }}"
    
  tasks:
    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install required system packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - git
          - nginx
        state: present

    - name: Create application directory
      file:
        path: "{{ app_directory }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Clone repository from GitHub
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_directory }}"
        version: main
        force: yes
      become_user: "{{ app_user }}"

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker and Docker Compose
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add user to docker group
      user:
        name: "{{ app_user }}"
        groups: docker
        append: yes

    # CRITICAL: Reset SSH connection to apply docker group membership
    - name: Reset SSH connection to apply docker group membership
      meta: reset_connection

    - name: Copy nginx production configuration from cloned repo
      copy:
        src: "{{ app_directory }}/nginx-conf/yii2-production.conf"
        dest: /etc/nginx/conf.d/default.conf
        owner: root
        group: root
        mode: '0644'
        backup: yes
        remote_src: yes

    - name: Remove sites-enabled directory completely
      file:
        path: /etc/nginx/sites-enabled
        state: absent
      ignore_errors: yes

    - name: Remove sites-available directory completely
      file:
        path: /etc/nginx/sites-available
        state: absent
      ignore_errors: yes

    - name: Remove any other config files that might conflict
      shell: find /etc/nginx/conf.d/ -name "*.conf" ! -name "default.conf" -delete
      ignore_errors: yes

    - name: Test nginx configuration
      command: nginx -t
      register: nginx_test
      failed_when: nginx_test.rc != 0

    - name: Reload nginx configuration
      systemd:
        name: nginx
        state: reloaded

    # Wait a moment for docker group to be fully applied
    - name: Wait for docker group membership to be applied
      pause:
        seconds: 5

    - name: Check if Docker Swarm is initialized
      command: docker info --format '{{.Swarm.LocalNodeState}}'
      register: swarm_status
      become_user: "{{ app_user }}"
      changed_when: false
      failed_when: false

    # =================================================================
    # SMART SWARM LOGIC - Handles both single and multi-node setups
    # =================================================================

    - name: Determine swarm manager (first host in inventory)
      set_fact:
        swarm_manager: "{{ groups['all'][0] }}"
        is_swarm_manager: "{{ inventory_hostname == groups['all'][0] }}"
        is_swarm_worker: "{{ inventory_hostname != groups['all'][0] }}"

    - name: Display swarm role assignment
      debug:
        msg: |
          Swarm Role Assignment:
          - Manager: {{ swarm_manager }}
          - Current host: {{ inventory_hostname }}
          - Role: {{ 'Manager' if is_swarm_manager else 'Worker' }}
          - Total hosts: {{ groups['all'] | length }}
          - Swarm Status: {{ swarm_status.stdout | default('unknown') }}

    # Initialize swarm ONLY on the first host (manager)
    - name: Initialize Docker Swarm on manager node
      command: docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}
      become_user: "{{ app_user }}"
      when: 
        - is_swarm_manager
        - swarm_status.stdout != "active"
      register: swarm_init_result

    # Get worker join token (only on manager)
    - name: Get worker join token
      command: docker swarm join-token worker -q
      become_user: "{{ app_user }}"
      register: worker_join_token
      when: is_swarm_manager
      failed_when: false

    # Get manager IP for workers to join
    - name: Get manager IP address
      set_fact:
        manager_ip: "{{ hostvars[swarm_manager]['ansible_default_ipv4']['address'] }}"
      when: is_swarm_worker

    # Share the join token across all hosts
    - name: Share worker join token to all hosts
      set_fact:
        shared_worker_token: "{{ hostvars[swarm_manager]['worker_join_token']['stdout'] }}"
      when: 
        - hostvars[swarm_manager]['worker_join_token'] is defined
        - hostvars[swarm_manager]['worker_join_token']['stdout'] is defined
        - is_swarm_worker

    # Join worker nodes to the swarm
    - name: Join worker nodes to swarm
      command: docker swarm join --token {{ shared_worker_token }} {{ manager_ip }}:2377
      become_user: "{{ app_user }}"
      when:
        - is_swarm_worker
        - swarm_status.stdout != "active"
        - shared_worker_token is defined
      register: swarm_join_result
      failed_when: false

    # Wait for all nodes to be ready
    - name: Wait for swarm nodes to stabilize
      pause:
        seconds: 10
      when: groups['all'] | length > 1

    - name: Copy docker-stack.yml from cloned repo
      copy:
        src: "{{ app_directory }}/docker-stack.yml"
        dest: "{{ app_directory }}/docker-stack.yml"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
        remote_src: yes

    - name: Ensure asset-proxy.php exists in web directory
      copy:
        src: "{{ app_directory }}/yii2_sample_app/web/asset-proxy.php"
        dest: "{{ app_directory }}/yii2_sample_app/web/asset-proxy.php"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
        remote_src: yes
      ignore_errors: yes

    # Pull images on ALL nodes (for better performance)
    - name: Pull latest Docker image on all nodes
      command: docker pull slayerop15/yii2-docker-ansible:latest
      become_user: "{{ app_user }}"
      retries: 3
      delay: 5
      register: docker_pull_result
      failed_when: false

    # Deploy stack ONLY from manager node
    - name: Deploy application stack (manager only)
      command: docker stack deploy -c {{ app_directory }}/docker-stack.yml {{ app_name }}
      become_user: "{{ app_user }}"
      register: stack_result
      when: is_swarm_manager
      failed_when: false

    - name: Wait for stack deployment to stabilize
      pause:
        seconds: 45
      when: is_swarm_manager

    # Check swarm status (from manager only)
    - name: Check swarm nodes status
      command: docker node ls
      become_user: "{{ app_user }}"
      register: swarm_nodes
      when: is_swarm_manager
      failed_when: false

    - name: Check stack services status
      command: docker stack services {{ app_name }} --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}"
      become_user: "{{ app_user }}"
      register: stack_services
      when: is_swarm_manager
      failed_when: false

    - name: Wait for containers to be fully ready
      command: docker service ls --filter name={{ app_name }} --format '{{.Replicas}}'
      become_user: "{{ app_user }}"
      register: replica_check
      until: "'0/' not in replica_check.stdout"
      retries: 20
      delay: 15
      ignore_errors: yes
      when: is_swarm_manager

    # Health checks (test from all nodes that have nginx)
    - name: Verify application health
      uri:
        url: "http://localhost/health"
        method: GET
        status_code: 200
      register: health_check
      retries: 15
      delay: 10
      ignore_errors: yes

    - name: Test main application page
      uri:
        url: "http://localhost/"
        method: GET
        status_code: 200
      register: app_check
      retries: 10
      delay: 5
      ignore_errors: yes

    # Final status display (comprehensive)
    - name: Display final deployment status
      debug:
        msg: |
          =======================================================
          DEPLOYMENT COMPLETED
          =======================================================
          
          Configuration:
          - Deployment Mode: {{ 'Single Node' if groups['all'] | length == 1 else 'Multi-Node Cluster' }}
          - Total Nodes: {{ groups['all'] | length }}
          - Manager Node: {{ swarm_manager }}
          - Current Node: {{ inventory_hostname }} ({{ 'Manager' if is_swarm_manager else 'Worker' }})
          
          Docker Pull Status: {{ 'SUCCESS' if docker_pull_result.rc == 0 else 'FAILED' }}
          
          {% if is_swarm_manager and swarm_nodes is defined %}
          Docker Swarm Status:
          {{ swarm_nodes.stdout if swarm_nodes.rc == 0 else 'Swarm command failed' }}
          
          Service Status:
          {{ stack_services.stdout if stack_services is defined and stack_services.rc == 0 else 'Service command failed' }}
          {% endif %}
          
          Node Health Status:
          - Nginx Config: {{ 'PASSED' if nginx_test.rc == 0 else 'FAILED' }}
          - Application Health: {{ 'HEALTHY' if health_check.status | default(0) == 200 else 'CHECKING...' }}
          - Main Page: {{ 'ACCESSIBLE' if app_check.status | default(0) == 200 else 'CHECKING...' }}
          
          Access Points:
          {% for host in groups['all'] %}
          - Node {{ loop.index }}: http://{{ hostvars[host]['ansible_default_ipv4']['address'] }}/
          {% endfor %}
          
          Management Commands (run on manager node as {{ app_user }}):
          - Check nodes: docker node ls
          - Check services: docker stack services {{ app_name }}
          - View logs: docker service logs {{ app_name }}_app
          - Scale service: docker service scale {{ app_name }}_app=4
          
          =======================================================
      when: inventory_hostname == groups['all'][0] 